The 1-my_list
===================
# run test with python3 -m doctest -v ./tests/*.txt

Using 1-my_list
===============

import functions from module:
>>> Mylist = __import__('1-my_list').MyList

Succes case:
=============

Test ints Example 1:
    >>> my_list = Mylist()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]
    >>> print(my_list)
    [1, 4, 2, 3, 5]

Test ints Example 2:
    >>> my_list = Mylist()
    >>> my_list.append(6)
    >>> my_list.append(7)
    >>> my_list.append(100)
    >>> my_list.append(9)
    >>> my_list.append(8)
    >>> print(my_list)
    [6, 7, 100, 9, 8]
    >>> my_list.print_sorted()
    [6, 7, 8, 9, 100]
    >>> print(my_list)
    [6, 7, 100, 9, 8]

Test Negative ints:
    >>> my_list = Mylist()
    >>> my_list.append(-1)
    >>> my_list.append(-4)
    >>> my_list.append(-2)
    >>> my_list.append(-3)
    >>> my_list.append(-5)
    >>> print(my_list)
    [-1, -4, -2, -3, -5]
    >>> my_list.print_sorted()
    [-5, -4, -3, -2, -1]
    >>> print(my_list)
    [-1, -4, -2, -3, -5]

Normal list:
    >>> my_list = Mylist[1, 2, 3, 4]
    >>> my_list.print_sorted()
    [1, 2, 3, 4]

Empty list:
    >>> my_list = Mylist()
    >>> my_list.print_sorted()
    []

Correct Class Type test:
    >>> my_list = Mylist()
    >>> type(my_list) == Mylist
    True    

Correct Instance Type test:
    >>> my_list = Mylist()
    >>> isinstance(my_list, object)
    True

    >>> isinstance(my_list, list)
    False

    >>> issubclass(my_list, list)
    True

print_sorted method is an instance method:
    >>> my_list = Mylist()
    >>> type(my_list.__dict__['print_sorted'])
    <class 'function'>

print_sorted method with 0 argument:
    >>> my_list = Mylist()
    >>> my_list.print_sorted()
    []

print_sorted method with 1 argument:
    >>> my_list = Mylist()
    >>> my_list.print_sorted([1, 2, 3, 4])
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

print_sorted method with 2 argument:
    >>> my_list = Mylist()
    >>> my_list.print_sorted([1, 2, 3, 4], [5, 6, 7, 8])
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 3 were given

'print_sorted' in dir(Mylist) is True:
    >>> my_list = Mylist()
    >>> 'print_sorted' in dir(my_list)
    True
